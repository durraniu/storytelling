% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_story.R
\name{generate_story}
\alias{generate_story}
\title{Generate a Fictional Story with LLM}
\usage{
generate_story(
  user_prompt,
  num_paras = 5,
  system_prompt = NULL,
  chat_fn = ellmer::chat_google_gemini,
  model = "gemini-2.0-flash",
  ...
)
}
\arguments{
\item{user_prompt}{Character. Prompt about story}

\item{num_paras}{Integer. Number of paragraphs in the generated story. Default is 5}

\item{system_prompt}{Character. System prompt for the client that generates stories. Default value is \code{NULL} that will create a system prompt with the function \code{storytelling::generate_story_system_prompt} that instructs the LLM to create an adventure story in a Hero's Journey structure}

\item{chat_fn}{Ellmer client function. Default is \code{ellmer::chat_google_gemini}}

\item{model}{LLM model. Default is \code{"gemini-2.0-flash"}}

\item{...}{Additional named arguments that go in \code{chat_fn}. You may include the API key here using \code{api_key} argument, but it is recommended to provide the API key in your \code{.Renviron} file using \code{usethis::edit_r_environ()}. For Gemini, you may get an API key \href{https://ai.google.dev/gemini-api/docs/api-key}{here}. See \href{https://ellmer.tidyverse.org/}{ellmer docs} for more provider options}
}
\value{
Character vector containing story text of length equal to \code{num_paras}
}
\description{
Generate a Fictional Story with LLM
}
\examples{
\dontrun{
library(storytelling)
user_prompt <- "Tell me a story of a boy who learned to fly."
generate_story(user_prompt)
generate_story(user_prompt, 10)
generate_story(user_prompt, 10, system_prompt = generate_story_system_prompt(
  genre = "thriller",
  struc = "Freytag's Pyramid",
  num_paras = 10
))
}
}
